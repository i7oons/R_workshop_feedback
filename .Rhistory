rename(email = 2) |>
filter(row_number() == n(), .by = email) |> # Take the last record if duplicated
select(-Timestamp)
respondents_count <- nrow(dat1)
#load data for pre-workshop organisation
pre_wksp <- dat1 |>
select(email, matches("1.[1-4]")) |>
pivot_longer(-email,
names_to = "qns",
values_to = "rating") |>
mutate(
qns = str_sub(qns, 3, 3) |> as.numeric(), # 3 is the index position of the str_sub for qns
qns = case_when(
qns == 1 ~ "It was easy to register for the workshop",
qns == 2 ~ "Communications for the workshop were clear",
qns == 3 ~ "Communications for the workshop were timely",
qns == 4 ~ "Instructions for workshop preparation were clear",
.default = "Unknown"
),
qns = factor(qns,
levels = c("It was easy to register for the workshop","Communications for the workshop were clear",
"Communications for the workshop were timely","Instructions for workshop preparation were clear")),
rating = case_when(
rating == 1 ~ "Strongly disagree",
rating == 2 ~ "Disagree",
rating == 3 ~ "Neutral",
rating == 4 ~ "Agree",
rating == 5 ~ "Strongly agree",
.default = "Unknown"
),
rating = factor(rating,
levels = c("Strongly disagree", "Disagree", "Neutral",
"Agree", "Strongly agree"))
)
pre_wksp_1 <- pre_wksp |>
count(qns, rating) |>
mutate(prop = n/sum(n),
.by = qns)
# load data for Facilitator explanation
explain <- dat1 |>
select(email, matches("^[2-7]\\.1")) |>
pivot_longer(-email,
names_to = "topic",
values_to = "rating") |>
mutate(
topic = str_sub(topic, 1, 1) |> as.numeric(),
topic = case_when(
topic == 2 ~ "Intro to R",
topic == 3 ~ "Data Viz",
topic == 4 ~ "Data Wrangling",
topic == 5 ~ "Descriptive Analysis",
topic == 6 ~ "Intro to Quarto",
topic == 7 ~ "Report generation",
.default = "Unknown"
),
topic = factor(topic,
levels = c("Intro to R", "Data Viz", "Data Wrangling",
"Descriptive Analysis", "Intro to Quarto",
"Report generation")),
rating = case_when(
rating == 1 ~ "Strongly disagree",
rating == 2 ~ "Disagree",
rating == 3 ~ "Neutral",
rating == 4 ~ "Agree",
rating == 5 ~ "Strongly agree",
.default = "Unknown"
),
rating = factor(rating,
levels = c("Strongly disagree", "Disagree", "Neutral",
"Agree", "Strongly agree")),
qns = "The facilitator's explanation was easy to follow"
)
explain_1 <- explain |>
count(topic, rating, qns) |>
mutate(prop = n/sum(n),
.by = topic)
# load data for materials
materials <- dat1 |>
select(email, matches("^[2-7]\\.2")) |>
pivot_longer(-email,
names_to = "topic",
values_to = "rating") |>
mutate(
topic = str_sub(topic, 1, 1) |> as.numeric(),
topic = case_when(
topic == 2 ~ "Intro to R",
topic == 3 ~ "Data Viz",
topic == 4 ~ "Data Wrangling",
topic == 5 ~ "Descriptive Analysis",
topic == 6 ~ "Intro to Quarto",
topic == 7 ~ "Report generation",
.default = "Unknown"
),
topic = factor(topic,
levels = c("Intro to R", "Data Viz", "Data Wrangling",
"Descriptive Analysis", "Intro to Quarto",
"Report generation")),
rating = case_when(
rating == 1 ~ "Strongly disagree",
rating == 2 ~ "Disagree",
rating == 3 ~ "Neutral",
rating == 4 ~ "Agree",
rating == 5 ~ "Strongly agree",
.default = "Unknown"
),
rating = factor(rating,
levels = c("Strongly disagree", "Disagree", "Neutral",
"Agree", "Strongly agree")),
qns = "The training materials clear and adequate"
)
materials_1 <- materials |>
count(topic, rating, qns) |>
mutate(prop = n/sum(n),
.by = topic)
p_pre_wksp <-  ggplot(pre_wksp_1, aes(x = prop, y = fct_rev(qns), fill = fct_rev(rating))) +
geom_col(alpha = 0.8, show.legend = TRUE) +
labs(x = "", y = "", fill = "",
title = "Pre-workshop Organisation") +
scale_fill_manual(values = c("#236EC3", "#78AFE6", "#E1E1E1", "#E6AAA0", "#C32314")) +
guides(fill = guide_legend(reverse = TRUE)) + # reverse legend order
scale_x_continuous(labels = scales::label_percent()) +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank()
)
p_explain <- ggplot(explain_1, aes(x = prop, y = fct_rev(topic), fill = fct_rev(rating))) +
geom_col(alpha = 0.8) +
labs(x = "", y = "", fill = "",
title = "The facilitator's explanation was easy to follow") +
scale_fill_manual(values = c("#236EC3", "#78AFE6", "#E1E1E1", "#E6AAA0", "#C32314")) +
guides(fill = guide_legend(reverse = TRUE)) + # reverse legend order
scale_x_continuous(labels = scales::label_percent()) +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank()
)
p_materials <- ggplot(materials_1, aes(x = prop, y = fct_rev(topic), fill = fct_rev(rating))) +
geom_col(alpha = 0.8) +
labs(x = "", y = "", fill = "",
title = "The training materials clear and adequate") +
scale_fill_manual(values = c("#236EC3", "#78AFE6", "#E1E1E1", "#E6AAA0", "#C32314")) +
guides(fill = guide_legend(reverse = TRUE)) + # reverse legend order
scale_x_continuous(labels = scales::label_percent()) +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank()
)
#| message : false
#| warning: false
# Load packages
library(tidyverse)
library(googlesheets4)
library(here)
library(gtsummary)
library(flextable)
# Load data
## Registration
registrants_url <- "https://docs.google.com/spreadsheets/d/1ZMLHBtBn83r69u0IHmtAyjJ_QU8XV9uevYIuomj8x1g/edit#gid=146447740"
registrants <- read_sheet(registrants_url) |>
select(email = `Email Address`,
first_name = `Given/First Name`,
last_name = `Family/Last Name`,
gender = Gender,
country = `Country of Residence`,
type = `Type of Participant`,
org = `Organization...11`,
SSRG = `Are you a member of a SSRG applicant organisation?`) |>
filter(row_number() == n(), .by = email) |> # Take the last record if duplicated
mutate(
# Make sure the emails in the registration and feedback are the same
email = case_when(
email == "lapeonalaja@gmail.com" ~ "lape.onalaja@ird.global",
email == "israr.ahmad.hri@nih.org.pk" ~ "israrpmrc@gmail.com",
email == "Mondar.Ahmed@ird.global" ~ "mondar.ahmed@ird.global",
email == "Maryam.younus@ird.global" ~ "maryam.younus@ird.global",
email == "aftab.khan.hri@nih.org.pk" ~ "aftabropmrc@gmail.com",
email == "minhal.hyder@ird.golbal" ~ "minhal.hyder@ird.global",
email == "mohsin.h.alvi@pill.org.pk" ~ "mohsinhassanalvi@gmail.com",
.default = email
),
country = recode(country, "Karachi" = "Pakistan")
)
participants |>
select(gender, country, type, org) |>
mutate(
type = recode(type, "SSRG" = "PIECEs"),
type = factor(type, levels = c("PIECEs", "Fellowship", "Other")),
org = factor(org, levels = c("IRD", "Not IRD"),
labels = c("IRD staff", "External participant"))
) |>
tbl_summary(label = list(
gender ~ "Gender",
country ~ "Country of Residence",
type ~ "Type of Participant",
org ~ "Participant Organization"
)) |>
bold_labels()
# Load data
## Registration
registrants_url <- "https://docs.google.com/spreadsheets/d/1ZMLHBtBn83r69u0IHmtAyjJ_QU8XV9uevYIuomj8x1g/edit#gid=146447740"
registrants <- read_sheet(registrants_url) |>
select(email = `Email Address`,
first_name = `Given/First Name`,
last_name = `Family/Last Name`,
gender = Gender,
country = `Country of Residence`,
type = `Type of Participant`,
org = `Organization...11`,
SSRG = `Are you a member of a SSRG applicant organisation?`) |>
filter(row_number() == n(), .by = email) |> # Take the last record if duplicated
mutate(
# Make sure the emails in the registration and feedback are the same
email = case_when(
email == "lapeonalaja@gmail.com" ~ "lape.onalaja@ird.global",
email == "israr.ahmad.hri@nih.org.pk" ~ "israrpmrc@gmail.com",
email == "Mondar.Ahmed@ird.global" ~ "mondar.ahmed@ird.global",
email == "Maryam.younus@ird.global" ~ "maryam.younus@ird.global",
email == "aftab.khan.hri@nih.org.pk" ~ "aftabropmrc@gmail.com",
email == "minhal.hyder@ird.golbal" ~ "minhal.hyder@ird.global",
email == "mohsin.h.alvi@pill.org.pk" ~ "mohsinhassanalvi@gmail.com",
.default = email
),
country = recode(country, "Karachi" = "Pakistan")
)
## Attended at least one day
at_least_one_day <- read_csv(here("data", "R Workshop January 2024 (participant characteristics) - Copy of Attended for 1 day.csv")) |>
rename(
first_name = `Given/First Name`,
last_name = `Family/Last Name`
)
participants <- registrants |>
semi_join(at_least_one_day, join_by(first_name, last_name))
## Feedback form
feedback_url <- "https://docs.google.com/spreadsheets/d/12jxEV9rqIOrIw70lVXfSegorv25owciTMS-hjSotioo/edit?resourcekey#gid=1120526525"
feedback_coltypes <- "Tciiiicciicciicciicciicciicciiccc" # Manually specifying column types as 2.3 was auto-converted to a list when it should be a character.
feedback <- read_sheet(feedback_url, col_types = feedback_coltypes)
participants |>
select(gender, country, type, org) |>
mutate(
type = recode(type, "SSRG" = "PIECEs"),
type = factor(type, levels = c("PIECEs", "Fellowship", "Other")),
org = factor(org, levels = c("IRD", "Not IRD"),
labels = c("IRD staff", "External participant"))
) |>
tbl_summary(label = list(
gender ~ "Gender",
country ~ "Country of Residence",
type ~ "Type of Participant",
org ~ "Participant Organization"
)) |>
bold_labels()
# Load data
## Registration
registrants_url <- "https://docs.google.com/spreadsheets/d/1ZMLHBtBn83r69u0IHmtAyjJ_QU8XV9uevYIuomj8x1g/edit#gid=146447740"
registrants <- read_sheet(registrants_url) |>
select(email = `Email Address`,
first_name = `Given/First Name`,
last_name = `Family/Last Name`,
gender = Gender,
country = `Country of Residence`,
type = `Type of Participant`,
org = `Organization...11`,
SSRG = `Are you a member of a SSRG applicant organisation?`) |>
filter(row_number() == n(), .by = email) |> # Take the last record if duplicated
mutate(
# Make sure the emails in the registration and feedback are the same
email = case_when(
email == "lapeonalaja@gmail.com" ~ "lape.onalaja@ird.global",
email == "israr.ahmad.hri@nih.org.pk" ~ "israrpmrc@gmail.com",
email == "Mondar.Ahmed@ird.global" ~ "mondar.ahmed@ird.global",
email == "Maryam.younus@ird.global" ~ "maryam.younus@ird.global",
email == "aftab.khan.hri@nih.org.pk" ~ "aftabropmrc@gmail.com",
email == "minhal.hyder@ird.golbal" ~ "minhal.hyder@ird.global",
email == "mohsin.h.alvi@pill.org.pk" ~ "mohsinhassanalvi@gmail.com",
.default = email
),
country = recode(country, "Karachi" = "Pakistan")
)
## Attended at least one day
at_least_one_day <- read_csv(here("data", "R Workshop January 2024 (participant characteristics) - Copy of Attended for 1 day.csv")) |>
rename(
first_name = `Given/First Name`,
last_name = `Family/Last Name`
)
participants <- registrants |>
semi_join(at_least_one_day, join_by(first_name, last_name))
## Feedback form
feedback_url <- "https://docs.google.com/spreadsheets/d/12jxEV9rqIOrIw70lVXfSegorv25owciTMS-hjSotioo/edit?resourcekey#gid=1120526525"
feedback_coltypes <- "Tciiiicciicciicciicciicciicciiccc" # Manually specifying column types as 2.3 was auto-converted to a list when it should be a character.
feedback <- read_sheet(feedback_url, col_types = feedback_coltypes)
#| fig-width: 7
#| fig-height: 3
#| fig-align: center
#| fig-cap-location: top
data.frame(days = 1:5,
attended = c(32, 31, 29, 25, 26)) |>
ggplot(aes(x = days, y = attended)) +
geom_line(colour = "steelblue", linewidth = 1) +
geom_point(colour = "steelblue", size = 4) +
geom_text(aes(label = attended), nudge_y = 3) +
labs(x = NULL, y = NULL,
title = "Daily number of workshop participants") +
scale_y_continuous(limits = c(0, 40), labels = scales::label_number()) +
scale_x_continuous(breaks = 1:5, labels = paste("Day", 1:5)) +
theme_light() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank()
)
feedback1 <- feedback |>
rename(email = `Email Address`) |>
filter(row_number() == n(), .by = email) |> # Take the last record if duplicated
select(-Timestamp) |>
mutate(use_ird_email = str_detect(email, "ird\\.global"))
# Write a function to create 3 likert plots
plot_likert <- function(data, x_var, y_var, fill_var, fig_title) {
likert_colours <- c("#236EC3", "#78AFE6", "#E1E1E1", "#E6AAA0", "#C32314")
ggplot(data, aes(x = {{x_var}}, y = fct_rev({{y_var}}), fill = fct_rev({{fill_var}}))) +
geom_col(alpha = 0.8, show.legend = TRUE) +
labs(x = NULL, y = NULL, fill = NULL, title = {{fig_title}}) +
scale_fill_manual(values = likert_colours) +
guides(fill = guide_legend(reverse = TRUE)) + # reverse legend order
scale_x_continuous(labels = scales::label_percent()) +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank()
)
}
feedback1 <- feedback |>
rename(email = `Email Address`) |>
filter(row_number() == n(), .by = email) |> # Take the last record if duplicated
select(-Timestamp) |>
mutate(use_ird_email = str_detect(email, "ird\\.global"))
# Write a function to create 3 likert plots
plot_likert <- function(data, x_var, y_var, fill_var, fig_title) {
likert_colours <- c("#236EC3", "#78AFE6", "#E1E1E1", "#E6AAA0", "#C32314")
ggplot(data, aes(x = {{x_var}}, y = fct_rev({{y_var}}), fill = fct_rev({{fill_var}}))) +
geom_col(alpha = 0.8, show.legend = TRUE) +
labs(x = NULL, y = NULL, fill = NULL, title = {{fig_title}}) +
scale_fill_manual(values = likert_colours) +
guides(fill = guide_legend(reverse = TRUE)) + # reverse legend order
scale_x_continuous(labels = scales::label_percent()) +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank()
)
}
# Summary table for registrants
participants |>
semi_join(feedback1, join_by(email)) |>
select(-c(email, first_name, last_name)) |>
tbl_summary(label = list(
gender ~ "Gender",
country ~ "Country of Residence",
type ~ "Type of Participant",
org ~ "Participant Organization"
)) |>
bold_labels()
#| fig-width: 7
#| fig-height: 2.5
#| fig-align: center
questions <- c(
"It was easy to register for the workshop.",
"Communications for the workshop were clear.",
"Communications for the workshop were timely.",
"Instructions for workshop preparation were clear."
)
ratings <- c(
"Strongly disagree",
"Disagree",
"Neutral",
"Agree",
"Strongly agree"
)
# Load data for pre-workshop organisation
pre_wksp_feedback <- feedback1 |>
select(email, matches("1.[1-4]")) |>
pivot_longer(-email,
names_to = "qns",
values_to = "rating") |>
mutate(
qns = str_sub(qns, 3, 3) |> as.numeric(), # 3 is the index position of the str_sub for qns
qns = case_when(
qns == 1 ~ questions[1],
qns == 2 ~ questions[2],
qns == 3 ~ questions[3],
qns == 4 ~ questions[4],
.default = "Unknown"
),
qns = factor(qns, levels = questions),
rating = case_when(
rating == 1 ~ ratings[1],
rating == 2 ~ ratings[2],
rating == 3 ~ ratings[3],
rating == 4 ~ ratings[4],
rating == 5 ~ ratings[5],
.default = "Unknown"
),
rating = factor(rating, levels = ratings)
)
pre_wksp_feedback_1 <- pre_wksp_feedback |>
count(qns, rating) |>
mutate(prop = n/sum(n),
.by = qns)
plot_likert(data = pre_wksp_feedback_1,
x_var = prop, y_var = qns, fill_var = rating,
fig_title = "Pre-Workshop Organisation")
#| fig-width: 7
#| fig-height: 2.5
#| fig-align: center
questions <- c(
"It was easy to register for the workshop.",
"Communications for the workshop were clear.",
"Communications for the workshop were timely.",
"Instructions for workshop preparation were clear."
)
ratings <- c(
"Strongly disagree",
"Disagree",
"Neutral",
"Agree",
"Strongly agree"
)
# Load data for pre-workshop organisation
pre_wksp_feedback <- feedback1 |>
select(email, matches("1.[1-4]")) |>
pivot_longer(-email,
names_to = "qns",
values_to = "rating") |>
mutate(
qns = str_sub(qns, 3, 3) |> as.numeric(), # 3 is the index position of the str_sub for qns
qns = case_when(
qns == 1 ~ questions[1],
qns == 2 ~ questions[2],
qns == 3 ~ questions[3],
qns == 4 ~ questions[4],
.default = "Unknown"
),
qns = factor(qns, levels = questions),
rating = case_when(
rating == 1 ~ ratings[1],
rating == 2 ~ ratings[2],
rating == 3 ~ ratings[3],
rating == 4 ~ ratings[4],
rating == 5 ~ ratings[5],
.default = "Unknown"
),
rating = factor(rating, levels = ratings)
)
pre_wksp_feedback_1 <- pre_wksp_feedback |>
count(qns, rating) |>
mutate(prop = n/sum(n),
.by = qns)
plot_likert(data = pre_wksp_feedback_1,
x_var = prop, y_var = qns, fill_var = rating,
fig_title = "Pre-Workshop Organisation")
#| fig-width: 7
#| fig-height: 3
#| fig-align: center
topics <- c(
"Intro to R",
"Data Viz",
"Data Wrangling",
"Descriptive Analysis",
"Intro to Quarto",
"Report generation"
)
# Load data for Facilitator explanation
explain <- feedback1 |>
select(email, matches("^[2-7]\\.1")) |>
pivot_longer(-email,
names_to = "topic",
values_to = "rating") |>
mutate(
topic = str_sub(topic, 1, 1) |> as.numeric(),
topic = case_when(
topic == 2 ~ topics[1],
topic == 3 ~ topics[2],
topic == 4 ~ topics[3],
topic == 5 ~ topics[4],
topic == 6 ~ topics[5],
topic == 7 ~ topics[6],
.default = "Unknown"
),
topic = factor(topic, levels = topics),
rating = case_when(
rating == 1 ~ ratings[1],
rating == 2 ~ ratings[2],
rating == 3 ~ ratings[3],
rating == 4 ~ ratings[4],
rating == 5 ~ ratings[5],
.default = "Unknown"
),
rating = factor(rating, levels = ratings)
)
explain_1 <- explain |>
count(topic, rating) |>
mutate(prop = n/sum(n),
.by = topic)
plot_likert(data = explain_1,
x_var = prop, y_var = topic, fill_var = rating,
fig_title = "Statement: The facilitator's explanation was easy to follow.")
